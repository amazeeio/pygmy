#!/usr/bin/env ruby

require 'thor'
require 'yaml'

require 'pygmy'

class PygmyBin < Thor
  class_option :verbose, type: :boolean, aliases: '-v', default: false

  desc 'up', 'Bring up pygmy services (dnsmasq, haproxy, mailhog, resolv, ssh-agent)'
  long_desc <<-LONGDESC
    Bring up pygmy services (dnsmasq, haproxy, resolv, ssh-agent)

    When run, there will be two docker containers started:

    - dnsmasq: to resolve DNS requests for your the domain *.docker.amazee.io (unless you add --no-resolver)

    - haproxy: to forward HTTP and HTTPs requests to the docker containers running Drupal.

    - ssh-agent: to keep the ssh-agent at one single place, so that all other docker containers
      can consume the ssh key. You can bypass automatically adding keys to the agent by using --no-addkey.

    On Linux: The local resolver (/etc/resolv.conf) will be configured to use the dnsmasq
    instance as a nameserver. (unless you add --no-resolver)

    On Mac: A resolver file (/etc/resolver/docker.amazee.io) will be created to use the dnsmasq
    instance as a nameserver for all *.docker.amazee.io domains. (unless you add --no-resolver)

    > $ pygmy up
  LONGDESC
  option :addkey, type: :boolean, default:true
  option :resolver, type: :boolean, default: true
  def up
    exec_up(options)
  end

  desc 'update', 'Pulls Docker Images and recreates the Containers'
  long_desc <<-LONGDESC
    Runs 'docker pull' on the Docker images in order to get their newest versions.
    After that restarts all containers with removing them, so that the new images are used.
  LONGDESC
  def update
    exec_update
  end

  desc 'stop', 'Stop all pygmy services'
  long_desc <<-LONGDESC
    Stops all pygmy services.  Can optionally pass [-d|--destroy]
    to destroy the containers when they stop.

    > $ pygmy stop [-d|--destroy]
  LONGDESC
  option :destroy, type: :boolean, aliases: '-d', default: false
  def stop
    exec_stop(options)
  end

  desc 'down', 'Stop and destroy all pygmy services'
  long_desc <<-LONGDESC
    Stops all pygmy services and destroy the containers when they stop.

    > $ pygmy down
  LONGDESC
  def down
    exec_stop({:destroy => true})
  end

  desc 'addkey [~/.ssh/id_rsa]', 'Add additional ssh-key'
  long_desc <<-LONGDESC
    Adds an additional ssh key to the ssh-agent.
    Needs the absolute path to key as an argument
    or uses ~/.ssh/id_rsa if none provided

    > $ pygmy addkey [~/.ssh/other_key]
  LONGDESC
  def addkey(key = "#{Dir.home}/.ssh/id_rsa")
    add_ssh_key(key)
  end

  desc 'version', 'Check current installed version of pygmy'
  def version
    puts "Pygmy - Version: #{Pygmy::VERSION}"
  end

  desc 'restart', 'Stop and restart all pygmy services'
  long_desc <<-LONGDESC
    Stop and restart pygmy services (dnsmasq, resolv, haproxy, mailhog, ssh-agent)

    > $ pygmy restart [-d|--destroy]
  LONGDESC
  option :destroy, type: :boolean, aliases: '-d', default: false
  def restart
    exec_stop(options)
    exec_up(options)
  end

  desc 'status', 'Report status of the pygmy services'
  long_desc <<-LONGDESC
    Checks the current status of the services managed by pygmy.
    This includes dnsmasq, mailhog, and resolv

    > $ pygmy status
  LONGDESC
  def status
    exec_status(options)
  end

  private

  def exec_update
    Pygmy::Haproxy.pull
    Pygmy::Mailhog.pull
    Pygmy::SshAgent.pull
    puts "Done. Recreating containers...".yellow
    exec_stop({:destroy => true})
    exec_up({})
  end

  # start unifies the process of starting a container
  # in the standardized format and includes the error
  # handling.
  # * service is the service class (ie Pygmy::Haproxy)
  # * name is the human readable name for output
  def start(service, name)
    if service.start
      puts "Successfully started #{name}".green
    else
      puts "Error starting #{name}".red
    end
  end

  # status unifies the process of reporting the status
  # of a container in the standardized format and
  # includes the error handling.
  # * service is the service class (ie Pygmy::Haproxy)
  def status(service, name)
    if service.running?
      puts "[*] #{name}: Running as docker container #{service.container_name}".green
    else
      puts "[*] #{name} is not running".red
    end
  end

  # remove unifies the process of removing a container
  # in the standardized format and includes the error
  # handling.
  # * service is the service class (ie Pygmy::Haproxy)
  # * name is the human readable name for output
  # * options is the options passed to pygmy on execution
  def remove(service, name, options)
    if service.stop
      puts "#{name} container stopped".green
      if options[:destroy]
        if service.delete
          puts "#{name} container successfully deleted".green
        else
          puts "#{name} container failed to delete".red
        end
      end
    else
      puts "#{name} container failed to stop".red
    end
  end

  def exec_up(options)

    if options[:resolver]
      start(Pygmy::Dnsmasq, "dnsmasq")
    end

    start(Pygmy::Haproxy, "haproxy")
    start(Pygmy::Mailhog, "mailhog")
    start(Pygmy::SshAgent, "ssh-agent")

    if Pygmy::DockerNetwork.create
      puts "Successfully created amazeeio network".green
    else
      puts "Error creating amazeeio network".red
    end

    if Pygmy::DockerNetwork.connect
      puts "Successfully connected haproxy to amazeeio network".green
    else
      puts "Error connecting haproxy to amazeeio network".red
    end

    if options[:resolver]
      if Pygmy::Resolv.configure
        puts "Successfully configured local resolver".green
      else
        puts "Error configuring local resolver".red
      end
    end

    if options[:addkey]
      if Pygmy::SshAgentAddKey.add_ssh_key
        puts "Successfully injected ssh key".green
      else
        puts "Error injected ssh key".red
      end
    end
  end

  def exec_status(_options)

    status(Pygmy::Dnsmasq, "Dnsmasq")
    status(Pygmy::Haproxy, "Haproxy")
    status(Pygmy::Mailhog, "Mailhog")

    if Pygmy::DockerNetwork.exists?
      puts "[*] Network: Exists as name #{Pygmy::DockerNetwork.network_name}".green
    else
      puts "[*] Network does not exist".red
    end

    if Pygmy::DockerNetwork.haproxy_connected?
      puts "[*] Network: Haproxy #{Pygmy::DockerNetwork.haproxy_name} connected to #{Pygmy::DockerNetwork.network_name}".green
    else
      puts "[*] Haproxy is not connected to #{Pygmy::DockerNetwork.network_name}".red
    end

    if Pygmy::Resolv.has_our_nameserver?
      puts "[*] Resolv is properly configured".green
    else
      puts "[*] Resolv is not configured".red
    end

    if Pygmy::SshAgent.running?
      puts "[*] ssh-agent: Running as docker container #{Pygmy::SshAgent.container_name}, loaded keys:".green
      Pygmy::SshAgentAddKey.show_ssh_keys
    else
      puts "[*] ssh-agent is not running".red
    end

  end


  def add_ssh_key(key)

    if Pygmy::SshAgent.running?
      if Pygmy::SshAgentAddKey.add_ssh_key(key)
        puts "Successfully added ssh key".green
      else
        puts "Error added ssh key".red
      end
    else
      puts "ssh-agent is not running, cannot add key".red
    end

  end

  def exec_stop(options)
    if Pygmy::Resolv.clean
      puts "Resolver removed".green
    else
      puts "Error while removing the resolver".red
    end

    remove(Pygmy::Dnsmasq, "Dnsmasq", options)
    remove(Pygmy::Mailhog, "Mailhog", options)
    remove(Pygmy::SshAgent, "ssh-agent", options)
    remove(Pygmy::Haproxy, "Haproxy", options)

  end
end

aliases = {
  'start' => 'up',
}

if !ARGV.empty? && %w[-v --version].include?(ARGV.first)
  puts "Pygmy - Version: #{Pygmy::VERSION}"
else
  PygmyBin.start(ARGV.map { |a| aliases.keys.include?(a) ? aliases[a] : a })
end
